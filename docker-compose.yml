version: '3.8'  # Версия схемы docker-compose

services:
    postgres:
        image: postgres:16-alpine           # Используем официальный Postgres образ
        container_name: postgres            # Название контейнера
        environment:
            POSTGRES_USER: postgres           # Пользователь базы
            POSTGRES_PASSWORD: postgres       # Пароль
            POSTGRES_DB: orders-service       # Название базы данных (обрати внимание: ты просил заменить)
        ports:
            - "5432:5432"                      # Прокидываем порт наружу
        volumes:
            - postgres_data:/var/lib/postgresql/data  # Данные сохраняем между перезапусками
        networks:
            - orders-service                   # Указываем, что контейнер в сети orders-service

#    zookeeper:
#        image: confluentinc/cp-zookeeper:7.4.10  # Контейнер Zookeeper от Confluent
#        container_name: zookeeper-1
#        environment:
#            ZOOKEEPER_CLIENT_PORT: 2181       # Стандартный порт Zookeeper
#            ZOOKEEPER_TICK_TIME: 2000         # Время между heartbeat (стандарт)
#        ports:
#            - "2181:2181"                      # Прокидываем порт наружу
#        networks:
#            - orders-service


    kafka:
        image: bitnami/kafka:latest
        ports:
            - "9092:9092"
        container_name: kafka
        environment:
            - KAFKA_ENABLE_KRAFT=yes
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
        healthcheck:
            test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
            interval: 10s
            timeout: 5s
            retries: 10
        volumes:
            - kafka_data:/bitnami/kafka
        networks:
            - orders-service

    migrate:
        image: migrate/migrate:v4.15.2          # Указываем образ для миграций
        container_name: migrate
        depends_on:
            - postgres
        command: [
            "-path=/migrations",
            "-database=postgres://postgres:postgres@postgres:5432/orders-service?sslmode=disable",
            "up"
        ]
        volumes:
            - ./migrations:/migrations         # Подключаем локальные миграции
        networks:
            - orders-service

volumes:
    postgres_data:  # Создаём volume для postgres
    kafka_data:     # Создаём volume для kafka

networks:
    orders-service:  # Создаём кастомную сеть с именем orders-service
        driver: bridge














#    kafka:
#        image: confluentinc/cp-kafka:7.4.10
#        container_name: kafka
#        depends_on:
#            - zookeeper                        # Ждём запуска Zookeeper перед Kafka
#        ports:
#            - "9092:9092"
#        environment:
#            KAFKA_BROKER_ID: 1                # Уникальный ID брокера
#            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Указываем Zookeeper по имени сервиса
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092  # kafka:9092
#            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1           # Репликация — в одной ноде = 1
#        volumes:
#            - kafka_data:/var/lib/kafka/data  # Данные Kafka сохраняем
#        networks:
#            - orders-service
